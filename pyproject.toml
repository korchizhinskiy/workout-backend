[project]
name = "workout-backend"
version = "0.1.0"
description = "Workout backend application"
readme = "README.md"
requires-python = ">=3.12.7"
dependencies = [
    "alembic<2.0.0,>=1.13.2",
    "pydantic<3.0.0,>=2.9.2",
    "fastapi<1.0.0,>=0.115.0",
    "uvicorn<1.0.0,>=0.30.6",
    "gunicorn<24.0.0,>=23.0.0",
    "pyjwt<3.0.0,>=2.9.0",
    "cryptography<44.0.0,>=43.0.1",
    "pydantic-settings<3.0.0,>=2.5.2",
    "dishka<2.0.0,>=1.3.0",
    "sqlalchemy<3.0.0,>=2.0.35",
    "asyncpg<1.0.0,>=0.29.0",
    "uuid6<2025.0.0,>=2024.7.10",
    "bcrypt<5.0.0,>=4.2.0",
    "orjson<4.0.0,>=3.10.7",
    "redis[hiredis]<6.0.0,>=5.2.0",
]

[dependency-groups]
dev = [
    "ruff<1.0.0,>=0.6.6",
    "pyright<2.0.0,>=1.1.381",
    "pytest<9.0.0,>=8.3.3",
]

[tool.ruff]
fix = true
line-length = 120
target-version = "py312"
include = [
    "app/**/*.py",
    "app/**/*.pyi",
    "**/tests/**/*.py",
    "docs/**/*.py",
    "pyproject.toml",
]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors                              https://docs.astral.sh/ruff/rules/#error-e
    "W",     # pycodestyle warnings                            https://docs.astral.sh/ruff/rules/#warning-w
    "C90",   # mccabe                                          https://docs.astral.sh/ruff/rules/#mccabe-c90
    "N",     # pep8-naming                                     https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "D",     # pydocstyle                                      https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "I",     # isort                                           https://docs.astral.sh/ruff/rules/#isort-i
    "F",     # pyflakes                                        https://docs.astral.sh/ruff/rules/#pyflakes-f
    "ASYNC", # flake8-async                                    https://docs.astral.sh/ruff/rules/#flake8-async-async
    "C4",    # flake8-comprehensions                           https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "B",     # flake8-bugbear                                  https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "Q",     # flake8-quotes                                   https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "T20",   # flake8-print                                    https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "SIM",   # flake8-simplify                                 https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "PT",    # flake8-pytest-style                             https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "PTH",   # flake8-use-pathlib                              https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "TCH",   # flake8-type-checking                            https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
    "RUF",   # Ruff-specific rules                             https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "PERF",  # Perflint                                        https://docs.astral.sh/ruff/rules/#perflint-perf
    "UP",    # pyupgrade                                       https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "ANN",   # flake8-annotations                              https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
    "S",     # flake8-bandit                                   https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "BLE",   # blind-except                                    https://docs.astral.sh/ruff/rules/#flake8-blind-except-ble
    "FBT",   # flake8-boolean-trap                             https://docs.astral.sh/ruff/rules/#flake8-boolean-trap-fbt
    "A",     # flake8-builtins                                 https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    "COM",   # flake8-commas                                   https://docs.astral.sh/ruff/rules/#flake8-commas-com
    "C4",    # flake8-comprehensions                           https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "DTZ",   # flake8-datetimez                                https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
    "T10",   # flake8-debugger                                 https://docs.astral.sh/ruff/rules/#flake8-debugger-t10
    "EM",    # flake8-errmsg                                   https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
    "ISC",   # single-line-implicit-string-concatenation       https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc
    "ICN",   # flake8-import-conventions                       https://docs.astral.sh/ruff/rules/#flake8-import-conventions-icn
    "LOG",   # flake8-logging                                  https://docs.astral.sh/ruff/rules/#flake8-logging-log
    "G",     # flake8-logging-format                           https://docs.astral.sh/ruff/rules/#flake8-logging-format-g
    "INP",   # flake8-no-pep420                                https://docs.astral.sh/ruff/rules/#flake8-no-pep420-inp
    "PIE",   # flake8-pie                                      https://docs.astral.sh/ruff/rules/#flake8-pie-pie
    "PYI",   # flake8-pyi                                      https://docs.astral.sh/ruff/rules/#flake8-pyi-pyi
    "RET",   # flake8-return                                   https://docs.astral.sh/ruff/rules/#flake8-return-ret
    "SLOT",  # flake8-slots                                    https://docs.astral.sh/ruff/rules/#flake8-slots-slot
    "TID",   # flake8-tidy-imports                             https://docs.astral.sh/ruff/rules/#flake8-tidy-imports-tid
    "ARG",   # flake8-unused-arguments                         https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
    "FIX",   # flake8-fixme                                    https://docs.astral.sh/ruff/rules/#flake8-fixme-fix
    "ERA",   # eradicate"                                      https://docs.astral.sh/ruff/rules/#eradicate-era
    "PL",    # Pylint                                          https://docs.astral.sh/ruff/rules/#pylint-pl
    "TRY",   # tryceratops                                     https://docs.astral.sh/ruff/rules/#tryceratops-try
    "FURB",  # refurb                                          https://docs.astral.sh/ruff/rules/#refurb-furb
]

ignore = [
    "D100",     # Missing docstring in public module
    "D101",     # Missing docstring in public class
    "D102",     # Missing docstring in public method
    "D103",     # Missing docstring in public function
    "D104",     # Missing docstring in public package
    "D105",     # Missing docstring in magic methods
    "D106",     # Missing docstring in public nested class
    "D107",     # Missing docstring in __init__
    "D203",     # 1 blank line required before class docstring
    "D212",     # Multi-line docstring summary should start at the first line
    "TRY003",   # Avoid specifying long messages outside the exception class
    "EM101",    # Exception must not use a string literal, assign to variable first
    "EM102",    # Exception must not use an f-string literal, assign to variable first
    "FIX002",   # Line contains TODO, consider resolving the issue
]

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]

preview = true
extend-select = [
    "FAST",  # FastAPI                                         https://docs.astral.sh/ruff/rules/#fastapi-fast
    "DOC",   # pydoclint                                       https://docs.astral.sh/ruff/rules/#pydoclint-doc
]
  
[tool.ruff.lint.per-file-ignores]
"**/tests/**" = [
    "D100",     # Missing docstring in public module
    "D101",     # Missing docstring in public class
    "D102",     # Missing docstring in public method
    "D103",     # Missing docstring in public function
    "D104",     # Missing docstring in public package
    "D105",     # Missing docstring in magic methods
    "D106",     # Missing docstring in public nested class
    "S101",     # Use of assert detected]
    "PT004",    # Fixture {function} does not return anything, add leading underscore - Deprecated
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-gettext]
function-names = ["_", "gettext", "ngettext", "ugettetxt"]

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = true
parametrize-names-type = "tuple"
parametrize-values-row-type = "tuple"
parametrize-values-type = "tuple"

[tool.ruff.format]
preview = true

[tool.pyright]
venv = ".venv"
venvPath = "."
include = [
    "app",
]
exclude = [
    "**/migrations",
    "**/__pycache__",
]
defineConstant = { DEBUG = true }

disableBytesTypePromotions = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
reportMissingTypeStubs = "error"
reportAssertAlwaysTrue = "error"
reportInvalidStringEscapeSequence = "error"
reportInvalidTypeVarUse = "error"
reportSelfClsParameterName = "error"
reportUnsupportedDunderAll = "error"
reportUnusedExpression = "error"
reportWildcardImportFromLibrary = "error"

reportConstantRedefinition = "error"
reportDeprecated = "none"
reportDuplicateImport = "error"
reportIncompleteStub = "error"
reportInconsistentConstructor = "error"
reportInvalidStubStatement = "error"
reportMatchNotExhaustive = "error"
reportMissingParameterType = "error"
reportMissingTypeArgument = "error"
reportPrivateUsage = "error"
reportTypeCommentUsage = "error"
reportUnknownArgumentType = "error"
reportUnknownLambdaType = "error"
reportUnknownMemberType = "error"
reportUnknownParameterType = "error"
reportUnknownVariableType = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryContains = "error"
reportUnnecessaryIsInstance = "error"
reportUnusedClass = "error"
reportUnusedImport = "error"
reportUnusedFunction = "error"
reportUnusedVariable= "error"
reportUntypedBaseClass = "error"
reportUntypedClassDecorator = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedNamedTuple = "error"

reportMissingImports = true
reportIncompatibleVariableOverride = "none"
reportIncompatibleMethodOverride = "none"

pythonVersion = "3.12"
pythonPlatform = "Linux"

[tool.pytest.ini_options]
python_files = ["*_test.py", "*_tests.py", "test_*.py"]
python_functions = ["*_test", "test_*"]
testpaths = "app/tests"
addopts = "-rA -vvv"
